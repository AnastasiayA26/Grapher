%import common.WS
%ignore WS

?start: expr


?lassoc        {x, y, op}: x op y -> expr_binary | y
?rassoc        {x, y, op}: y op x -> expr_binary | y
?nonassoc      {x, y, op}: y op y -> expr_binary | y
?unary         {x, y, op}:   op x -> expr_unary  | y
?unary_postfix {x, y, op}: x op   -> expr_unary_postfix  | y
?ternary   {y, op1, op2}: y op1 y op2 y -> expr_ternary | y


############################################################
############## START OF AUTOGENERATED GRAMMAR ##############
# generated by generate_operators.py
?expr: expr_0
?expr_0: lassoc{expr_0, expr_1, OP_0}
OP_0: "|"
?expr_1: lassoc{expr_1, expr_2, OP_1}
OP_1: "^"
?expr_2: lassoc{expr_2, expr_3, OP_2}
OP_2: "&"
?expr_3: nonassoc{expr_3, expr_4, OP_3}
OP_3: "==" | "!=" | "<=" | ">=" | "<" | ">"
?expr_4: lassoc{expr_4, expr_5, OP_4}
OP_4: "+" | "-"
?expr_5: lassoc{expr_5, expr_6, OP_5}
OP_5: "*" | "/" | "%"
?expr_6: unary{expr_6, expr_7, OP_6}
OP_6: "+" | "-" | "*" | "&" | "!" | "~"
?expr_7: expr_others
############### END OF AUTOGENERATED GRAMMAR ###############
############################################################

?expr_others: expr_func_call
            | expr_literal

expr_func_call: ID "(" (expr ("," expr)* ","?)? ")"
?expr_literal: number
             | var
             | "(" expr ")"

var: ID
number: NUMBER

ID: /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /\d+/
